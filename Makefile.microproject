DEST_LIB = dist/parsegraph-$(DIST_NAME).lib.js
PROD_LIB = dist-prod/parsegraph-$(DIST_NAME).lib.js

CLEAN_FILES = \
	dist \
	dist-types \
	dist-prod \
	parsegraph-$(DIST_NAME)-dev.tgz \
	parsegraph-$(DIST_NAME)-prod.tgz

CONFIG_FILES = \
	Makefile \
	Makefile.microproject \
	yarn.lock \
	package.json \
	tsconfig.browser.json \
	tsconfig.prod.json \
	.babelrc \
	webpack.common.js \
	webpack.prod.js \
	webpack.config.js

all: build lint test coverage doc

build: $(DEST_LIB)
.PHONY: build

autobuild:
	npx webpack --watch --config webpack.config.js
.PHONY: autobuild

build-prod: $(PROD_LIB)
.PHONY: build-prod

demo:
	SITE_PORT=$(DEMO_PORT) cd demo && yarn build && yarn start
.PHONY: demo

RUN_TEST=npx jest --env=jsdom --no-cache

check:
	$(RUN_TEST)
.PHONY: check

test: check
.PHONY: test

autotest:
	$(RUN_TEST) --watch
.PHONY: autotest

coverage:
	$(RUN_TEST) --coverage --coverageDirectory=dist/coverage --coveragePathIgnorePatterns=demo
.PHONY: coverage

prettier:
	npx prettier --write src test demo
.PHONY: prettier

lint:
	npx eslint --fix $(SCRIPT_FILES)
.PHONY: lint

doc:
	npx typedoc --tsconfig tsconfig.browser.json src/index.ts --out ./dist/docs
.PHONY: doc

tar: parsegraph-$(DIST_NAME)-dev.tgz
.PHONY: tar

tar-prod: parsegraph-$(DIST_NAME)-prod.tgz
.PHONY: tar

wait:
	./wait.sh $(CONFIG_FILES) $(SCRIPT_FILES) $(EXTRA_SCRIPTS)
.PHONY: wait

clean:
	rm -rf $(CLEAN_FILES)
.PHONY: clean

EXTRA_FILES = \
	LICENSE \
	README.md \
	package.json

$(DEST_LIB): $(EXTRA_FILES) $(SCRIPT_FILES) $(EXTRA_SCRIPTS)
	npx webpack --config webpack.config.js

$(PROD_LIB): $(EXTRA_FILES) $(SCRIPT_FILES) $(EXTRA_SCRIPTS)
	NODE_ENV=production npx webpack --config webpack.prod.js

BUILD=parsegraph-$(DIST_NAME)

parsegraph-$(DIST_NAME)-dev.tgz: $(DEST_LIB)
  ./build-dev $BUILD $EXTRA_FILES

parsegraph-$(DIST_NAME)-prod.tgz: $(PROD_LIB)
  ./build-prod $BUILD $EXTRA_FILES
